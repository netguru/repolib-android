apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.vanniktech.android.junit.jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "co.netguru.patternlib.android"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode isBitrise ? Integer.parseInt(bitrise.io.buildNumber) : 1
        versionName '0.1.0'
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "api"

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    sourceSets.all {
        it.java.srcDir "src/$it.name/kotlin"
    }

    junitJacoco {
        jacocoVersion='0.8.2'
        excludes = ['android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/BR.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/*_MembersInjector.class',
                    '**/Dagger*Component.class',
                    '**/Dagger*Component$Builder.class',
                    '**/*Module_*Factory.class',
                    '**/AutoValue_*.*',
                    '**/*JavascriptBridge.class',
                    '**/Lambda$*.class',
                    '**/Lambda.class',
                    '**/*Lambda.class',
                    '**/*Lambda*.class']
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

    //Kotlin
    implementation libs.kotlin

    // Anko Commons
    implementation libs.ankoCommons
    implementation libs.ankoCommonsSupportV7
    implementation libs.ankoCommonsSupportV4

    // Support
    implementation libs.appCompat
    implementation libs.recyclerView

    // MVP
    implementation(libs.mosby) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
    }

    // Dagger
    implementation libs.dagger
    implementation libs.daggerAndroid
    implementation libs.daggerAndroidSupport
    kapt proc.dagger
    kapt proc.daggerAndroid
    compileOnly proc.javaxAnnotation

    //RxJava
    implementation libs.rxJava2
    implementation (libs.rxKotlin2)  {
        exclude module: 'rxjava'
        exclude module: 'kotlin-stdlib'
    }
    implementation(libs.rxAndroid2) {
        exclude module: 'rxjava'
    }

    // OkHttp + Retrofit
    implementation libs.okHttp
    implementation libs.okHttpLoggingInterceptor
    implementation libs.retrofit
    implementation libs.retrofitGsonConverter
    implementation libs.retrofitRxJava2Adapter

    // Timber
    implementation libs.timber

    debugImplementation libs.stetho
    debugImplementation libs.leakCanary
    debugImplementation libs.blockCanary
    debugImplementation libs.strictmodeNotifier

    // Unit testing
    testImplementation test.junit
    testImplementation test.mockito
    testImplementation test.mockitoKotlin

    //REPO LIB
    implementation project(path: ':repolib')
}
